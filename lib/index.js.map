{"version":3,"sources":["../src/index.js"],"names":["rulePath","baseDir","isNode","process","title","data","fs","require","path","expandedRulePath","untildify","readFileSync","resolve","fetch","loadData","dictionaries","yaml","safeLoad","dict","forEach","item","form","tokens","token","surface_form","push","message","expected","fix","loadDictionaries","context","userOptions","options","Object","assign","defaultOptions","createMatcher","getConfigBaseDir","matchAll","Syntax","RuleError","report","getSource","fixer","Str","node","text","kuromojin","tokenize","then","actualTokens","results","length","result","tokenIndex","index","getIndexFromTokens","replaceFrom","replaceTo","replaceTextRange","ruleError","reporter","__dirname","i","cwd","textlintRcFilePath","config","configFile","dirname","module","exports","linter"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nconst kuromojin = require(\"kuromojin\");\nconst createMatcher = require(\"morpheme-match-all\");\nconst yaml = require(\"js-yaml\");\n\nconst untildify = require(\"untildify\");\n\nconst defaultOptions = {\n  rulePath: __dirname + \"/../dict/fukushi.yml\",\n};\n\nasync function loadData(rulePath, baseDir) {\n  const isNode = process.title !== \"browser\";\n\n  let data;\n  if (isNode) {\n    const fs = require(\"fs\");\n    const path = require(\"path\");\n    const expandedRulePath = untildify(rulePath);\n    data = fs.readFileSync(path.resolve(baseDir, expandedRulePath), \"utf8\");\n  } else {\n    data = await fetch(rulePath);\n  }\n\n  return data;\n}\n\nasync function loadDictionaries(rulePath, baseDir) {\n  if (typeof rulePath === \"undefined\" || rulePath === \"\") {\n    return null;\n  }\n  const dictionaries = [];\n\n  const data = yaml.safeLoad(await loadData(rulePath, baseDir));\n\n  data.dict.forEach(function (item) {\n    var form = \"\";\n    item.tokens.forEach(function (token) {\n      form += token.surface_form;\n    });\n    dictionaries.push({\n      message: data.message + ': \"' + form + '\" => \"' + item.expected + '\"',\n      fix: item.expected,\n      tokens: item.tokens,\n    });\n  });\n\n  return dictionaries;\n}\n\nasync function reporter(context, userOptions = {}) {\n  const options = Object.assign(defaultOptions, userOptions);\n  const matchAll = createMatcher(\n    await loadDictionaries(options.rulePath, getConfigBaseDir(context))\n  );\n  const { Syntax, RuleError, report, getSource, fixer } = context;\n  return {\n    [Syntax.Str](node) {\n      // \"Str\" node\n      const text = getSource(node); // Get text\n      return kuromojin.tokenize(text).then((actualTokens) => {\n        const results = matchAll(actualTokens);\n\n        if (results.length == 0) {\n          return;\n        }\n\n        results.forEach(function (result) {\n          const tokenIndex = result.index;\n          const index = getIndexFromTokens(tokenIndex, actualTokens);\n          let replaceFrom = \"\";\n          result.tokens.forEach(function (token) {\n            replaceFrom += token.surface_form;\n          });\n          const replaceTo = fixer.replaceTextRange(\n            [index, index + replaceFrom.length],\n            result.dict.fix\n          );\n          const ruleError = new RuleError(result.dict.message, {\n            index: index,\n            fix: replaceTo, // https://github.com/textlint/textlint/blob/master/docs/rule-fixable.md\n          });\n          report(node, ruleError);\n        });\n      });\n    },\n  };\n}\n\nfunction getIndexFromTokens(tokenIndex, actualTokens) {\n  let index = 0;\n  for (let i = 0; i < tokenIndex; i++) {\n    index += actualTokens[i].surface_form.length;\n  }\n  return index;\n}\n\n// from https://github.com/textlint-rule/textlint-rule-prh/blob/master/src/textlint-rule-prh.js#L147\nconst getConfigBaseDir = (context) => {\n  if (typeof context.getConfigBaseDir === \"function\") {\n    return context.getConfigBaseDir() || process.cwd();\n  }\n  const textlintRcFilePath = context.config ? context.config.configFile : null;\n  return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nmodule.exports = {\n  linter: reporter,\n  fixer: reporter,\n};\n"]}
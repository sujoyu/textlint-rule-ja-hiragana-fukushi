{"version":3,"sources":["../src/index.js"],"names":["rulePath","baseDir","isNode","process","title","data","fs","require","path","expandedRulePath","untildify","readFileSync","resolve","fetch","text","loadData","dictionaries","yaml","safeLoad","dict","forEach","item","form","tokens","token","surface_form","push","message","expected","fix","loadDictionaries","kuromojin","createMatcher","defaultOptions","__dirname","matchAllCache","reporter","context","userOptions","Syntax","RuleError","getSource","fixer","report","Str","node","options","Object","assign","getConfigBaseDir","matchAll","tokenize","then","actualTokens","results","console","log","length","result","tokenIndex","index","getIndexFromTokens","replaceFrom","replaceTo","replaceTextRange","ruleError","i","cwd","textlintRcFilePath","config","configFile","dirname"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nimport { wrapReportHandler } from \"textlint-rule-helper\";\n\nconst kuromojin = require(\"kuromojin\");\nconst createMatcher = require(\"morpheme-match-all\");\nconst yaml = require(\"js-yaml\");\n\nconst untildify = require(\"untildify\");\n\nconst defaultOptions = {\n  rulePath: __dirname + \"/../dict/fukushi.yml\",\n};\n\nasync function loadData(rulePath, baseDir) {\n  const isNode = process.title !== \"browser\";\n\n  let data;\n  if (isNode) {\n    const fs = require(\"fs\");\n    const path = require(\"path\");\n    const expandedRulePath = untildify(rulePath);\n    data = fs.readFileSync(path.resolve(baseDir, expandedRulePath), \"utf8\");\n  } else {\n    data = await (await fetch(rulePath)).text();\n  }\n\n  return data;\n}\n\nasync function loadDictionaries(rulePath, baseDir) {\n  if (typeof rulePath === \"undefined\" || rulePath === \"\") {\n    return null;\n  }\n  const dictionaries = [];\n\n  const data = yaml.safeLoad(await loadData(rulePath, baseDir));\n\n  data.dict.forEach(function (item) {\n    var form = \"\";\n    item.tokens.forEach(function (token) {\n      form += token.surface_form;\n    });\n    dictionaries.push({\n      message: data.message + ': \"' + form + '\" => \"' + item.expected + '\"',\n      fix: item.expected,\n      tokens: item.tokens,\n    });\n  });\n\n  return dictionaries;\n}\n\nlet matchAllCache = null;\n\nfunction reporter(context, userOptions = {}) {\n  const { Syntax, RuleError, getSource, fixer } = context;\n  return wrapReportHandler(context, {}, (report) => {\n    return {\n      async [Syntax.Str](node) {\n        // \"Str\" node\n        const options = Object.assign(defaultOptions, userOptions);\n        const matchAll =\n          matchAllCache ||\n          createMatcher(\n            await loadDictionaries(options.rulePath, getConfigBaseDir(context))\n          );\n        matchAllCache = matchAll;\n        const text = getSource(node); // Get text\n        return kuromojin.tokenize(text).then((actualTokens) => {\n          const results = matchAll(actualTokens);\n          console.log(results);\n\n          if (results.length == 0) {\n            return;\n          }\n\n          results.forEach(function (result) {\n            const tokenIndex = result.index;\n            const index = getIndexFromTokens(tokenIndex, actualTokens);\n            let replaceFrom = \"\";\n            result.tokens.forEach(function (token) {\n              replaceFrom += token.surface_form;\n            });\n            const replaceTo = fixer.replaceTextRange(\n              [index, index + replaceFrom.length],\n              result.dict.fix\n            );\n            const ruleError = new RuleError(result.dict.message, {\n              index: index,\n              fix: replaceTo, // https://github.com/textlint/textlint/blob/master/docs/rule-fixable.md\n            });\n            report(node, ruleError);\n          });\n        });\n      },\n    };\n  });\n}\n\nfunction getIndexFromTokens(tokenIndex, actualTokens) {\n  let index = 0;\n  for (let i = 0; i < tokenIndex; i++) {\n    index += actualTokens[i].surface_form.length;\n  }\n  return index;\n}\n\n// from https://github.com/textlint-rule/textlint-rule-prh/blob/master/src/textlint-rule-prh.js#L147\nconst getConfigBaseDir = (context) => {\n  if (typeof context.getConfigBaseDir === \"function\") {\n    return context.getConfigBaseDir() || process.cwd();\n  }\n  const textlintRcFilePath = context.config ? context.config.configFile : null;\n  return textlintRcFilePath ? path.dirname(textlintRcFilePath) : process.cwd();\n};\n\nexport default reporter;\n"]}